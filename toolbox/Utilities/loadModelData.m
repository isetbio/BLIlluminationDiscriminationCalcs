function [modelData, calcParams] = loadModelData(calcIDStr)
% [modelData, calcParams] = loadModelData(calcIDStr)
%
% This function will load data generated by our computational observer model.
%
% Inputs:
%     calcIDStr  -  calculation name to load
%
% Outputs:
%     modelData  -  percent correct data from model
%     calcParams -  parameters for the calculation
% 
% xd 6/22/16  wrote it

%% Load the calcParams struct
analysisDir = getpref('BLIlluminationDiscriminationCalcs', 'AnalysisDir');
calcParams = load(fullfile(analysisDir,'SimpleChooserData',calcIDStr,['calcParams' calcIDStr '.mat']));
calcParams = calcParams.calcParams;

%% Check if calcParam is old or new
% If colors is not a field, then this suggests that the calcParam (and
% data associated with it) is from old calculations.  In this case, we will
% try our best to convert the old data the format required. If it is in the
% new format, then we can load the data with minimal editting.
if isfield(calcParams,'colors')
    theData = load(fullfile(analysisDir,'SimpleChooserData',calcIDStr,['ModelData' calcIDStr '.mat']));
    modelData = theData.results;
    
    calcParams.stimLevels = calcParams.illumLevels;
    calcParams.plotColor = cellfun(@(X) {X(1)},calcParams.colors);
    if length(calcParams.KgLevels)>length(calcParams.KpLevels), calcParams.noiseLevels = calcParams.KgLevels;
    else calcParams.noiseLevels = calcParams.KpLevels; end;
    return;
end

%% OLD Data
modelDataTemp = cell(4,1);
colors = {'blue' 'green' 'red' 'yellow'};
for ii = 1:4
    theData = load(fullfile(analysisDir,'SimpleChooserData',calcIDStr,[colors{ii} 'IllumComparison' calcIDStr '.mat']));
    modelDataTemp{ii} = theData.matrix;
end
s = size(modelDataTemp{1});
modelData = zeros([4,s]);
for ii = 1:4
    modelData(ii,:,:) = modelDataTemp{ii};
end

calcParams.colors = colors;
calcParams.stimLevels = 1:50;
calcParams.plotColor = {'b' 'g' 'r' 'y'};
calcParams.noiseLevels = (0:(calcParams.numKpSamples-1)) * calcParams.KpInterval + calcParams.startKp;
calcParams.noiseLevels = calcParams.noiseLevels';

end

